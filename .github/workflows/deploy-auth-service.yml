name: Deploy Modified Microservice to EC2

on:
  push:
    paths:
      - '**/**'
    branches:
      - main
      - test

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dir: ${{ steps.detect.outputs.changed_dir }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Detect modified service folder
        id: detect
        run: |
          SERVICE_DIR=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '/' | cut -d/ -f1 | sort -u | head -n1)
          echo "changed_dir=$SERVICE_DIR" >> $GITHUB_OUTPUT
          echo "üìÇ Carpeta modificada detectada: $SERVICE_DIR"

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest

    steps:
      - name: Deploy microservice to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Obtener carpeta modificada del job anterior (atenci√≥n al guion bajo)
            SERVICE_DIR="${{ needs.detect-changes.outputs.changed_dir }}"

            echo "üß© Servicio modificado: $SERVICE_DIR"

            # Abortamos si no hay carpeta detectada
            if [ -z "$SERVICE_DIR" ]; then
              echo "‚ùå No se detect√≥ ninguna carpeta modificada. Abortando."
              exit 1
            fi

            REPO_CODE="https://github.com/Bryan03A/UserDomain.git"
            REPO_ENVS="https://${{ secrets.ENV_REPO_TOKEN }}@github.com/Bryan03A/DomainUsers-envs.git"
            CODE_DIR="/home/ec2-user/deploy-code"
            ENVS_DIR="/home/ec2-user/deploy-envs"

            # Preparar carpetas
            mkdir -p "$CODE_DIR"
            mkdir -p "$ENVS_DIR"

            # Actualizar o clonar repositorio de c√≥digo
            cd "$CODE_DIR"
            if [ -d "UserDomain" ]; then
              cd UserDomain && git pull origin main && cd ..
            else
              git clone "$REPO_CODE"
            fi

            # Actualizar o clonar repositorio de envs
            cd "$ENVS_DIR"
            if [ -d "DomainUsers-envs" ]; then
              cd DomainUsers-envs && git pull origin main && cd ..
            else
              git clone "$REPO_ENVS"
            fi

            # Copiar archivo .env si existe
            if [ -f "$ENVS_DIR/DomainUsers-envs/$SERVICE_DIR/.env" ]; then
              cp "$ENVS_DIR/DomainUsers-envs/$SERVICE_DIR/.env" "$CODE_DIR/UserDomain/$SERVICE_DIR/.env"
              echo "‚úÖ .env copiado correctamente a $SERVICE_DIR"
            else
              echo "‚ö†Ô∏è  No se encontr√≥ el archivo .env para $SERVICE_DIR"
            fi

            # Mostrar contenido del archivo .env copiado
            if [ -f "$CODE_DIR/UserDomain/$SERVICE_DIR/.env" ]; then
              echo "üì¶ Contenido del .env:"
              cat "$CODE_DIR/UserDomain/$SERVICE_DIR/.env"
            else
              echo "‚ùå El archivo .env no se copi√≥ correctamente"
            fi